
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ProgramaAND ARRAY ASSIGN AT BEGIN BOOLEAN CARDINAL CASE CLOSEBRACKET CLOSECURLBRACKET CLOSEPARENTHESIS COLON COMMA CONST DATATYPE DIFFERENT DIV DO DOLLAR DOT DOUBLEQUOTATION DOWNTO ELSE END EQUAL FILE FOR FORWARDDASH FUNCTION GOTO GREATEROREQUAL GREATERTHAN ID IF IN INTEGER KEYWORD LABEL LESSOREQUAL LESSTHAN MINUS MOD MULTILINECOMMENTS NIL NOT OF ONELINECOMMENTS OPENBRACKET OPENCURLBRACKET OPENPARENTHESIS OR PACKED PLUS POWERTO PROCEDURE PROGRAM REAL RECORD REPEAT SEMICOLON SET SINGLEQUOTATION STAR STRING THEN TO TYPE UNTIL VAR WHILE WITHDvariaveis : VAR ListavariaveisCorpo : BEGIN conteudo END\n    Programa : Cabecalho Dvariaveis Corpo DOT\n             | Cabecalho Corpo\n    \n    Listavariaveis : Listavariaveis Variaveis COLON Tipo SEMICOLON\n                   | \n    \n    conteudo :\n    Cabecalho : PROGRAM Programname SEMICOLON\n    Variaveis : Variaveis COMMA ID\n              | ID\n    Programname : ID\n    Tipo : DATATYPE\n         | ARRAY OPENBRACKET Intervalo CLOSEBRACKET OF DATATYPE\n         | ID\n    \n    Intervalo : INTEGER DOT DOT INTEGER\n    '
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,5,14,17,],[0,-4,-3,-2,]),'VAR':([2,13,],[6,-8,]),'BEGIN':([2,4,6,11,13,25,],[7,7,-6,-1,-8,-5,]),'ID':([3,6,11,18,19,25,],[9,-6,16,23,24,-5,]),'END':([7,12,],[-7,17,]),'SEMICOLON':([8,9,20,21,23,33,],[13,-11,25,-12,-14,-13,]),'DOT':([10,17,28,30,],[14,-2,30,32,]),'COLON':([15,16,24,],[18,-10,-9,]),'COMMA':([15,16,24,],[19,-10,-9,]),'DATATYPE':([18,31,],[21,33,]),'ARRAY':([18,],[22,]),'OPENBRACKET':([22,],[26,]),'INTEGER':([26,32,],[28,34,]),'CLOSEBRACKET':([27,34,],[29,-15,]),'OF':([29,],[31,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Programa':([0,],[1,]),'Cabecalho':([0,],[2,]),'Dvariaveis':([2,],[4,]),'Corpo':([2,4,],[5,10,]),'Programname':([3,],[8,]),'Listavariaveis':([6,],[11,]),'conteudo':([7,],[12,]),'Variaveis':([11,],[15,]),'Tipo':([18,],[20,]),'Intervalo':([26,],[27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Programa","S'",1,None,None,None),
  ('Dvariaveis -> VAR Listavariaveis','Dvariaveis',2,'p_dvariaveis','declarations.py',2),
  ('Corpo -> BEGIN conteudo END','Corpo',3,'p_corpo','body.py',5),
  ('Programa -> Cabecalho Dvariaveis Corpo DOT','Programa',4,'p_programa','main_rules.py',6),
  ('Programa -> Cabecalho Corpo','Programa',2,'p_programa','main_rules.py',7),
  ('Listavariaveis -> Listavariaveis Variaveis COLON Tipo SEMICOLON','Listavariaveis',5,'p_listavariaveis','declarations.py',8),
  ('Listavariaveis -> <empty>','Listavariaveis',0,'p_listavariaveis','declarations.py',9),
  ('conteudo -> <empty>','conteudo',0,'p_conteudo','body.py',11),
  ('Cabecalho -> PROGRAM Programname SEMICOLON','Cabecalho',3,'p_cabecalho','main_rules.py',16),
  ('Variaveis -> Variaveis COMMA ID','Variaveis',3,'p_variaveis','declarations.py',19),
  ('Variaveis -> ID','Variaveis',1,'p_variaveis','declarations.py',20),
  ('Programname -> ID','Programname',1,'p_programname','main_rules.py',21),
  ('Tipo -> DATATYPE','Tipo',1,'p_tipo','declarations.py',30),
  ('Tipo -> ARRAY OPENBRACKET Intervalo CLOSEBRACKET OF DATATYPE','Tipo',6,'p_tipo','declarations.py',31),
  ('Tipo -> ID','Tipo',1,'p_tipo','declarations.py',32),
  ('Intervalo -> INTEGER DOT DOT INTEGER','Intervalo',4,'p_intervalo','declarations.py',46),
]
